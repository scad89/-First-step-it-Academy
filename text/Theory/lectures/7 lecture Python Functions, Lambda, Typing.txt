-----------Functions------------------
Важно называть функцию так, чтобы понятно было, что она выполняет.
В названии функции должен быть глагол(то есть действие).
Если необходимо вернуть функцию, с параметрами True or False, название функции должно иметь is or has.
camel case называется стиль записи функции, когда мы пишем первое слово с маленькой буквы, а остальные все с большой, 
но вместе.
snake case когда записываем все слова через нижнее подчёркивание.

Functions основные правила:
1. Она внятно названа

2. Соответствует принципу единственной обязанности. 
Она должна выполнять одно действие.

3. Возвращает значение(при необходимости)

4. Состоит не более чем из 50 строк
5. Она по возможности чистая
Эта та функция, которая не изменяет из вне какие-то данные. То есть параметр вошёл в функцию, произвелась манипуляция
с данными и ни к чему не привязывается возвращённое значение.

------------Functions (default params)
Пример:
def greet(name, msg="Good morning"):
    print('Hello', name+', '+msg)


greet('Kate')
greet('Bruce', 'How do you do?')

Output:
Hello Kate, Good morning
Hello Bruce, How do you do?  # новое значение затирает параметр, который передан в функцию.



----------Functions (arbitrary params)
def greet(*names):
    for name in names:
        print('Hello', name)


greet('Kate', 'Monica', 'Luck', 'John')

Output:
Hello Kate
Hello Monica
Hello Luck
Hello John

Тут мы в функцию просто засунули имена. 

-----lambda
double = lambda x: x*2

print(double(5))

Output: 10

my_list = [1, 2, 3, 4, 5, 6]

new_list = list(filter(lambda x:(x%2 == 0), my_list))
print(new_list)

Output: [2, 4, 6]
Тут мы оставляем наш лист такой, какой он есть и создаём новый лист.

lambda можно использовать для простых операций.

-------------Аннотации типов
def indent_rights(s: str, width: int) ->str:    # тут явно указывается тип
    return " " * (max(0, width-len(s))) +s

---------Рекурсия----------
Функция, которая вызовет себя саму.

Классный пример - матрешки или зеркала в отражении которого видно зеркало.

Реальная задача: Дан список чисел, необходимо просуммировать его. 

То есть, мы накапливаем результат(стек) и повторно производим действия, пока не наступит определённое событие.

def sum(list):
    if len(list) == 0:
        return 0
    else:
        return sum(list[:-1]) + list[-1]


sum([1, 2, 3, 4, 5])

Каждый вызов функции удаляет одно значение.



