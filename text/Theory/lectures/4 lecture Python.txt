1. Переменным давать осмысленные имена на английском языке.

Пи и число элейера называть с заглавной буквы(COLOR и пр)

Написать символ не по синтаксису можно с помощью \

Мультистрока """
////
///
"""

Перебор
Оптимизировать задачу(3-и штуки)

Проверка установленной версии python cmd- python --version

Библиотека sys:
import sys

sys.maxsize

Примеры кодов:
name = 'Dmitriy'
greeting = 'How are you, {}'
dmity_greeting = greeting.format(name) # формаритурем строку
print(dmitry_greeting)

Выведет How ate you, Dmitriy благодаря теймплейту {}

Ещё один пример:
my_name = 'Dmitry'
your_name = input('Enter your name ')
print(f'Hello {your_name}. My name is Dmitry') # в принте ставим format

Пример кода для boolean
age = 20
is_over_age = age >= 16
is_under_age = age < 16
print(is_over_age)
True
print(is_under_age)
False

Списки
friends = ["Rolf", "Anne"]
print(len(friends))   # выводит значения массива

другой пример кода:
friends = [["Rolf", 24], ["Bob", 30], ["Anne", 27]]
print(friends[0][0])    # выведет Rolf


friends = ["Rolf", 24, "Bob", 30, "Anne", 27]
for index, i in enumerate(friends):
    if i == "Rolf":
        print(index)
Вывод индекса 

Без использования enumerate в цикл пришлось бы вводить переменную-счетчик или извлекать элементы по индексу.

Вывод индекса определённого элемента в двухуровневом списке:
friends = [["Rolf", 24], ["Bob", 30], ["Anne", 27]]
count = -1
count2 = -1
for i in friends:
    count += 1
    if i == ["Rolf", 24]:
        b = i
        for j in b:
            if j == "Rolf":
                count2 += 1
                print(count2)

Алгоритм многомерного списка:
for i in range(len(A)):
    for j in range(len(A[i]):
        print(A[i][j], end = ' ')
    print()

Тоже самое, но не по индексам, а по значениям:
for row in A:
    for elem in row:
        print(elem, end = ' ')
    print()

    
Добавление и удаление в списках:
friend = ["Rolf", "Bob", "Anne"]
friends.append("Jen")
print(friends)

Jen добавится в конец списка.
print(friends[0]) - вывод по индексу элемента
friends.insert(i, x)	Вставляет на i-ый элемент значение x
friend.remove()  удаляет элемент массива
del friends[4] удаляет элемент по индексу
friends.pop(4) так же удаляет элемент по индексу
friends[0] = "Vasya" заменяет элемент по индексу
friends.sort() - сортирует список
list.count(val) возвращает количество вхождений указанного значения в список. То есть сколько раз 
это значение в списке

Set-ы
Days = set(['Wed', 'Sun', 'Fri', 'Tud', 'Mon', 'Thy', 'Sat']) и пр.
- Не может быть дубликаций
- Нет доступа по индексу
- Элемент внутри set незименяемый(immutable)

Days.add('Newday')- добавляет значение (не append)
Days.discard('Newday') - удаляет значение

